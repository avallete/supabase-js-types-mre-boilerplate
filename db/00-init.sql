CREATE TABLE countries (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    name TEXT NOT NULL UNIQUE
);

ALTER TABLE countries ENABLE ROW LEVEL SECURITY;

CREATE TABLE country_alphas (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    country_id BIGINT NOT NULL UNIQUE REFERENCES countries(id),
    alpha2 TEXT NOT NULL UNIQUE,
    alpha3 TEXT NOT NULL UNIQUE
);

ALTER TABLE country_alphas ENABLE ROW LEVEL SECURITY;


CREATE TABLE country_alpha_locations (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    alpha2 TEXT NOT NULL UNIQUE,
    location TEXT NOT NULL
);

ALTER TABLE country_alpha_locations ENABLE ROW LEVEL SECURITY;


CREATE OR REPLACE FUNCTION country_alpha_locations(COUNTRIES)
RETURNS SETOF COUNTRY_ALPHA_LOCATIONS ROWS 1
STABLE PARALLEL SAFE RETURNS NULL ON NULL INPUT
LANGUAGE sql
AS $function$
    SELECT country_alpha_locations.*
    FROM country_alpha_locations
    INNER JOIN country_alphas ON country_alpha_locations.alpha2 = country_alphas.alpha2
    WHERE country_alphas.country_id = $1.id;
$function$;

CREATE OR REPLACE FUNCTION all_countries()
RETURNS SETOF COUNTRIES
STABLE PARALLEL SAFE
LANGUAGE sql
AS $function$
    SELECT * FROM countries;
$function$;

CREATE OR REPLACE FUNCTION country_by_name(name TEXT)
RETURNS SETOF COUNTRIES ROWS 1
STABLE PARALLEL SAFE CALLED ON NULL INPUT
LANGUAGE sql
AS $function$
    SELECT *
    FROM countries
    WHERE name = $1;
$function$;

CREATE OR REPLACE FUNCTION lowername(COUNTRIES)
RETURNS TEXT
STABLE PARALLEL SAFE RETURNS NULL ON NULL INPUT
LANGUAGE sql
AS $function$
    SELECT lower($1.name);
$function$;